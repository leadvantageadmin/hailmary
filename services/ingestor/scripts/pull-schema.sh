#!/bin/bash
set -e

# Ingestor Schema Pull Script
# Pulls schema from Schema API service for Ingestor service

echo "üì• Pulling schema for Ingestor service..."

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SERVICE_DIR="$(dirname "$SCRIPT_DIR")"

# Change to service directory
cd "$SERVICE_DIR"

# Configuration
VERSION=${1:-"latest"}
SCHEMA_API_URL=${SCHEMA_API_URL:-"http://localhost:3001"}
TARGET_DIR=${TARGET_DIR:-"./data/schema"}

echo "üîç Configuration:"
echo "   ‚Ä¢ Version: $VERSION"
echo "   ‚Ä¢ Schema API URL: $SCHEMA_API_URL"
echo "   ‚Ä¢ Target Directory: $TARGET_DIR"

# Create target directory
mkdir -p "$TARGET_DIR"

# Check if schema API is available
echo "üîç Checking schema API availability..."
if ! curl -s -f "$SCHEMA_API_URL/health" > /dev/null; then
    echo "‚ùå Schema API is not available at $SCHEMA_API_URL"
    echo "   Make sure the schema service is running:"
    echo "   cd ../schema && docker-compose up schema-api"
    exit 1
fi

echo "‚úÖ Schema API is available"

# Determine version to use
if [ "$VERSION" = "latest" ]; then
    echo "üîç Getting latest version information..."
    LATEST_RESPONSE=$(curl -s "$SCHEMA_API_URL/api/schema/latest")
    if [ $? -ne 0 ]; then
        echo "‚ùå Failed to get latest version from schema API"
        exit 1
    fi
    
    VERSION_FILE=$(echo "$LATEST_RESPONSE" | jq -r '.version')
    if [ "$VERSION_FILE" = "null" ] || [ -z "$VERSION_FILE" ]; then
        echo "‚ùå Could not determine latest version"
        exit 1
    fi
    echo "üì¶ Latest version: $VERSION_FILE"
else
    VERSION_FILE="$VERSION"
    echo "üì¶ Using specified version: $VERSION_FILE"
fi

# Get schema information
echo "üîç Fetching schema information for version: $VERSION_FILE"
SCHEMA_RESPONSE=$(curl -s "$SCHEMA_API_URL/api/schema/version/$VERSION_FILE")
if [ $? -ne 0 ]; then
    echo "‚ùå Failed to fetch schema for version $VERSION_FILE"
    echo "üìã Available versions:"
    curl -s "$SCHEMA_API_URL/api/schema/versions" | jq -r '.versions[]' | head -5
    exit 1
fi

# Check if schema exists
if echo "$SCHEMA_RESPONSE" | jq -e '.error' > /dev/null; then
    echo "‚ùå Schema version $VERSION_FILE not found"
    echo "üìã Available versions:"
    curl -s "$SCHEMA_API_URL/api/schema/versions" | jq -r '.versions[]' | head -5
    exit 1
fi

# Extract schema and metadata
echo "üìÇ Extracting schema files..."
SCHEMA_CONTENT=$(echo "$SCHEMA_RESPONSE" | jq -r '.schema')
METADATA_CONTENT=$(echo "$SCHEMA_RESPONSE" | jq -r '.metadata')

# Write schema file
echo "$SCHEMA_CONTENT" > "$TARGET_DIR/schema.prisma"
echo "‚úÖ Schema file written: $TARGET_DIR/schema.prisma"

# Write metadata file
echo "$METADATA_CONTENT" > "$TARGET_DIR/metadata.json"
echo "‚úÖ Metadata file written: $TARGET_DIR/metadata.json"

# Get migrations
echo "üîç Fetching migrations for version: $VERSION_FILE"
MIGRATIONS_RESPONSE=$(curl -s "$SCHEMA_API_URL/api/schema/migrations/$VERSION_FILE")
if [ $? -eq 0 ] && ! echo "$MIGRATIONS_RESPONSE" | jq -e '.error' > /dev/null; then
    # Create migrations directory
    mkdir -p "$TARGET_DIR/migrations"
    
    # Extract and write migration files
    echo "$MIGRATIONS_RESPONSE" | jq -r '.migrations[] | .file' | while read -r filename; do
        if [ -n "$filename" ]; then
            content=$(echo "$MIGRATIONS_RESPONSE" | jq -r --arg file "$filename" '.migrations[] | select(.file == $file) | .content')
            echo "$content" > "$TARGET_DIR/migrations/$filename"
            echo "‚úÖ Migration file written: $TARGET_DIR/migrations/$filename"
        fi
    done
    
    MIGRATION_COUNT=$(find "$TARGET_DIR/migrations" -name "*.sql" | wc -l)
    echo "‚úÖ Migration files found: $MIGRATION_COUNT files"
else
    echo "‚ö†Ô∏è  No migrations found for version $VERSION_FILE"
fi

# Verify schema files
echo "üîç Verifying schema files..."
if [ -f "$TARGET_DIR/schema.prisma" ]; then
    echo "‚úÖ Schema file found: $TARGET_DIR/schema.prisma"
else
    echo "‚ùå Schema file not found: $TARGET_DIR/schema.prisma"
    exit 1
fi

if [ -f "$TARGET_DIR/metadata.json" ]; then
    echo "‚úÖ Metadata file found: $TARGET_DIR/metadata.json"
else
    echo "‚ùå Metadata file not found: $TARGET_DIR/metadata.json"
    exit 1
fi

if [ -d "$TARGET_DIR/migrations" ]; then
    MIGRATION_COUNT=$(find "$TARGET_DIR/migrations" -name "*.sql" | wc -l)
    echo "‚úÖ Migration files found: $MIGRATION_COUNT files"
else
    echo "‚ö†Ô∏è  No migrations directory found"
fi

# Display schema information
echo ""
echo "üìã Schema Information:"
if [ -f "$TARGET_DIR/metadata.json" ]; then
    echo "   ‚Ä¢ Version: $(jq -r '.version' "$TARGET_DIR/metadata.json")"
    echo "   ‚Ä¢ Author: $(jq -r '.author' "$TARGET_DIR/metadata.json")"
    echo "   ‚Ä¢ Created: $(jq -r '.createdAt' "$TARGET_DIR/metadata.json")"
    echo "   ‚Ä¢ Description: $(jq -r '.description' "$TARGET_DIR/metadata.json")"
fi

echo ""
echo "‚úÖ Schema version $VERSION_FILE pulled successfully from Schema API!"
echo ""
echo "üöÄ Next steps:"
echo "   ‚Ä¢ Restart ingestor service: ./scripts/restart.sh"
echo "   ‚Ä¢ Test schema integration: ./scripts/test-schema-integration.sh"
echo "   ‚Ä¢ Verify schema files: ls -la $TARGET_DIR/"
